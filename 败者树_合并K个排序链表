/*
leetcode 23
合并 k 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。

示例:

输入:
[
  1->4->5,
  1->3->4,
  2->6
]
输出: 1->1->2->3->4->4->5->6

*/




/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.size() == 0 )
            return nullptr;
        vector<int> leaves(lists.size() + 1, 0);
        vector<int> internal(lists.size(), 0);
        for(int i = 1; i <= lists.size(); ++i)
        {
            if(lists[i - 1] != nullptr)
                leaves[i] = lists[i - 1]->val;
            else
                leaves[i] = INT_MAX;
        }
        leaves[0] = INT_MIN;
        int k = lists.size();
        for(int j = k; j > 0; --j)
        {
            adjust(leaves, internal, j);
        }
        
        int j = internal[0];
        ListNode *phead = lists[j - 1];
        ListNode *p1 = phead;
	    while (leaves[internal[0]] != INT_MAX)
	    {
            int val = 0;
            lists[j - 1] = lists[j - 1]->next;
            if(lists[j - 1] == nullptr)
                val = INT_MAX;
            else
                val = lists[j - 1]->val;                        
		    leaves[j] = val;
		    adjust(leaves, internal, j);
            j = internal[0];
            p1->next = lists[j - 1];
            p1 = lists[j - 1];
	    }
        return phead;
    }
    
    void adjust(vector<int> & leaves, vector<int>& internal, int i)
    {
	    int k = internal.size();
	    int parent = (i + k - 1) >> 1;
		while (parent > 0)
		{
			if (leaves[i] > leaves[internal[parent]])
			{
				int tmp = internal[parent];
				internal[parent] = i;
				i = tmp;
			}
			parent = parent >> 1;
		}
	    internal[0] = i;
    }

};
