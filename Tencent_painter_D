/*

腾讯2019春招 第一批 笔试题集合
画家小Q又开始他的艺术创作。小Q拿出了一块有NxM像素格的画板, 画板初始状态是空白的,用'X'表示。
小Q有他独特的绘画技巧,每次小Q会选择一条斜线, 如果斜线的方向形如'/',即斜率为1,小Q会选择这条斜线中的一段格子,都涂画为蓝色,用'B'表示;如果对角线的方向形如'\',即斜率为-1,小Q会选择这条斜线中的一段格子,都涂画为黄色,用'Y'表示。
如果一个格子既被蓝色涂画过又被黄色涂画过,那么这个格子就会变成绿色,用'G'表示。
小Q已经有想画出的作品的样子, 请你帮他计算一下他最少需要多少次操作完成这幅画。 
输入描述:
每个输入包含一个测试用例。
每个测试用例的第一行包含两个正整数N和M(1 <= N, M <= 50), 表示画板的长宽。
接下来的N行包含N个长度为M的字符串, 其中包含字符'B','Y','G','X',分别表示蓝色,黄色,绿色,空白。整个表示小Q要完成的作品。


输出描述:
输出一个正整数, 表示小Q最少需要多少次操作完成绘画。

输入例子1:
4 4
YXXB
XYGX
XBYY
BXXY

输出例子1:
3

例子说明1:
XXXX
XXXX
XXXX
XXXX
->
YXXX
XYXX
XXYX
XXXY
->
YXXB
XYBX
XBYX
BXXY
->
YXXB
XYGX
XBYY
BXXY

*/






// fortest.cpp : 定义控制台应用程序的入口点。
//
#include "stdafx.h"
#include<iostream>
#include<vector>
#include<string>
using namespace std;

int n = 0, m = 0;


void visit_Y(int i, int j, vector<string> &panel) {
	if ((i < 0) || (i >= n) || (j < 0) || (j >= m))
		return;
	if ((panel[i][j] == 'X')||(panel[i][j] == 'B'))
	{
		return;
	}
	if (panel[i][j] == 'Y')    panel[i][j] = 'X';
	if (panel[i][j] == 'G')    panel[i][j] = 'B';
	visit_Y(i - 1, j - 1, panel);
	visit_Y(i + 1, j + 1, panel);
}

void visit_B(int i, int j, vector<string> &panel) {
	if ((i < 0) || (i >= n) || (j < 0) || (j >= m))
		return;
	if ((panel[i][j] == 'X') || (panel[i][j] == 'Y'))
	{
		return;
	}
	if (panel[i][j] == 'B')    panel[i][j] = 'X';
	if (panel[i][j] == 'G')    panel[i][j] = 'Y';
	visit_B(i - 1, j + 1, panel);
	visit_B(i + 1, j - 1, panel);
}

int main() {

	cin >> n >> m;
	vector<string> panel;
	for (int i = 0; i < n; ++i)
	{
		string tmp;
		cin >> tmp;
		panel.push_back(tmp);
	}
	int count = 0;
	for (int i = 0; i < n; ++i)
	{
		for (int j = 0; j < m; ++j)
		{
			if ((panel[i][j] == 'X'))
				continue;
			if ((panel[i][j] == 'Y'))
			{
				count++;
				visit_Y(i, j, panel);
			}
				
			if ((panel[i][j] == 'B'))
			{
				count++;
				visit_B(i, j, panel);
			}
				
			if ((panel[i][j] == 'G'))
			{
				count += 2;
				visit_Y(i, j, panel);
				visit_B(i, j, panel);
			}
		}
	}
	cout << count << endl;
	return 0;

}
