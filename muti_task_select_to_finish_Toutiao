
/*
产品经理(PM)有很多好的idea，而这些idea需要程序员实现。现在有N个PM，在某个时间会想出一个 idea，每个 idea 有提出时间、所需时间和优先等级。对于一个PM来说，最想实现的idea首先考虑优先等级高的，相同的情况下优先所需时间最小的，还相同的情况下选择最早想出的，没有 PM 会在同一时刻提出两个 idea。
同时有M个程序员，每个程序员空闲的时候就会查看每个PM尚未执行并且最想完成的一个idea,然后从中挑选出所需时间最小的一个idea独立实现，如果所需时间相同则选择PM序号最小的。直到完成了idea才会重复上述操作。如果有多个同时处于空闲状态的程序员，那么他们会依次进行查看idea的操作。
求每个idea实现的时间。
输入第一行三个数N、M、P，分别表示有N个PM，M个程序员，P个idea。随后有P行，每行有4个数字，分别是PM序号、提出时间、优先等级和所需时间。输出P行，分别表示每个idea实现的时间点。

输入描述:
输入第一行三个数N、M、P，分别表示有N个PM，M个程序员，P个idea。随后有P行，每行有4个数字，分别是PM序号、提出时间、优先等级和所需时间。全部数据范围 [1, 3000]。


输出描述:
输出P行，分别表示每个idea实现的时间点。

输入例子1:
2 2 5
1 1 1 2
1 2 1 1
1 3 2 2
2 1 1 2
2 3 5 5

输出例子1:
3
4
5
3
9

*/


// fortest.cpp : 定义控制台应用程序的入口点。
//
#include "stdafx.h"

#include<iostream>
#include<map>
#include<vector>
#include <algorithm>
using namespace std;


int number_task = 0;

struct task {
	int time = 0;
	int prior = 0;
	int dur = 0;
	int id = 0;
};
vector<int> finish_time;
vector<vector<task>> pm_task;

struct programmer {
	int current_time = 0;

	programmer() {
		current_time = 0;
	
	}

	void do_task() {
		
		bool flag = true;
		vector<task>::iterator task_obj = pm_task.at(0).begin();
		int task_pm = 0;
		// find the task needed to be finished
		for (size_t i = 0; i < pm_task.size(); ++i)
		{
			vector<task>& tasks = pm_task.at(i);
			if (tasks.size() == 0) continue;
			auto iter = tasks.begin();
			while ((iter != tasks.end()) && (iter->time > current_time))
			{
				iter++;
			}
			if (iter == tasks.end()) continue;
			if (flag)
			{
				task_obj = iter;
				task_pm = i;
				flag = false;
			}
			else {
				if (iter->dur < task_obj->dur) {
					task_obj = iter;
					task_pm = i;
				}
			}
		}
		// deal with the task
		if (!flag)
		{
			current_time += task_obj->dur;
			finish_time[task_obj->id] = current_time;
			pm_task.at(task_pm).erase(task_obj);
			number_task--;	
			

		}
		if (flag)
		{
			current_time++;
		}
	}
};
bool comp(task a, task b) {
	if (a.prior == b.prior)
	{
		if (a.dur == b.dur)
		{
			return (a.time < b.time);
		}
		return (a.dur < b.dur);
	}
	return (a.prior > b.prior);
}
bool comp2(programmer p1, programmer p2) {
	return (p1.current_time < p2.current_time);
}
int main() {
	
	int N = 0, M = 0, P = 0;
	cin >> N >> M >> P;
	pm_task.resize(N);
	for (size_t i = 0; i < P; ++i) {
		task a;
		int pm_id = 0;
		a.id = i;
		cin >> pm_id >> a.time >> a.prior >> a.dur;
		pm_task.at(pm_id - 1).push_back(a);
	}
	number_task = P;
	finish_time.resize(P);
	vector<programmer> coder_array(M);
	for (size_t i = 0; i < N; i++)
	{
		if (pm_task.at(i).size() == 0)
			continue;
		sort(pm_task.at(i).begin(), pm_task.at(i).end(), comp);
	}
	
	while (number_task > 0) {		
		
		sort(coder_array.begin(), coder_array.end(), comp2);
		coder_array.begin()->do_task();
	}

	for (int i = 0; i < finish_time.size(); i++)
	{
		printf("%d\n", finish_time[i]);
	}
	return 0;
}
