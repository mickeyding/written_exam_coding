/*
分金子（360公司2017春招真题）

									题目描述
									
A、B两伙马贼意外地在一片沙漠中发现了一处金矿，双方都想独占金矿，但各自的实力都不足以吞下对方，经过谈判后，双方同意用一个公平的方式来处理这片金矿。处理的规则如下：他们把整个金矿分成n段，由A、B开始轮流从最左端或最右端占据一段，直到分完为止。 
马贼A想提前知道他们能分到多少金子，因此请你帮忙计算他们最后各自拥有多少金子?（两伙马贼均会采取对己方有利的策略）


								
输入
测试数据包含多组输入数据。输入数据的第一行为一个正整数T(T<=20)，表示测试数据的组数。然后是T组测试数据，每组测试数据的第一行包含一个整数n，下一行包含n个数（n <= 500 ），表示每段金矿的含金量，保证其数值大小不超过1000。

样例输入
2 
6
4 7 2 9 5 2
10
140 649 340 982 105 86 56 610 340 879

输出
对于每一组测试数据，输出一行"Case #id: sc1 sc2"，表示第id组数据时马贼A分到金子数量为sc1，马贼B分到金子数量为sc2。详见样例。

样例输出
Case #1: 18 11
Case #2: 3206 981

时间限制
C/C++语言：1000MS其它语言：3000MS	
内存限制
C/C++语言：65536KB其它语言：589824KB


*/


#include<iostream>
#include<vector>
using namespace std;

void Core_solution(vector<int> a, int n, int &sum1, int &sum2) {
	vector< vector<int>> dp(n, vector<int> (n, 0));
	vector< vector<int>> sum(n, vector<int>(n, 0));
	for (int i = 0; i < n; ++i)
	{
		dp[i][i] = a[i];
		
	}

	for (int i = 0; i < n; ++i)
	{
		for (int j = i + 1; j < n; ++j)
		{
			for (int k = i; k <= j; ++k)
			{
				sum[i][j] += a[k];
			}
			
		}
	}
	for (int i =n - 1; i>=0; --i) //注意顺序，要倒序遍历
	{
		for (int j = i + 1; j < n; ++j)
		{
			dp[i][j] = sum[i][j] - min(dp[i + 1][j], dp[i][j - 1]);
		}
	}

	sum1 = dp[0][n - 1];
	sum2 = sum[0][n - 1] - sum1;
	

}
 
int main() {
	int q = 0;
	cin >> q;
	for (int i = 0; i < q; ++i)
	{
		int n = 0;
		cin >> n;
		vector<int> arr;
		for (int j = 0; j < n; ++j)
		{
			int tmp = 0;
			cin >> tmp;
			arr.push_back(tmp);
		}

		int sum1 = 0, sum2 = 0;
		Core_solution(arr, n, sum1, sum2);
		printf("Case #%d: %d %d\n",i+1,sum1,sum2);
	}

	return 0;

}
