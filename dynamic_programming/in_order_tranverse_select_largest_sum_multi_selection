/*Problem Statement

Given a list of n integers, A={a1,a2,…,an}, and another integer, k representing the expected sum. Select zero or more numbers from A such that the sum of these numbers is as near as possible, but not exceeding, to the expected sum (k).

Note

Each element of A can be selected multiple times.
If no element is selected then the sum is 0.
Input Format

The first line contains T the number of test cases. Each test case comprises of two lines. First line contains two integers, n k, representing the length of list A and expected sum, respectively. Second line consists of n space separated integers, a1,a2,…,an, representing the elements of list A.

Constraints 1≤T≤10 1≤n≤2000 1≤k≤2000 1≤ai≤2000,where i∈[1,n]

Output Format

Output T lines, the answer for each test case.

SAMPLE INPUT 
3
1 6
5
6 8
3 3 3 3 3 3
9 10
9 4 4 9 4 9 9 9 9
SAMPLE OUTPUT 
5
6
9
*/
// fortest.cpp : 定义控制台应用程序的入口点。
//
// Write your code here
#include<iostream>
#include<vector>
using namespace std;

int dynamic_programming(vector<int> a, int k) {
	vector<bool> dp((k + 1), false);

	dp[0] = true;
	for (int i = 1; i < a.size(); ++i)
		for (int j = a[i]; j <= k; ++j) {
			if (dp[j - a[i]])
			{
				dp[j] = true;
			}
			
		}

	
	for (int i = dp.size() - 1; i >= 0; --i)
	{
		if ( dp[i] == true)
		{			
			return (i);
		}
			
	}
	return 0;
}


int main() {
	int t = 0;
	cin >> t;
	vector<int> result;
	for (int i = 0; i < t; ++i)
	{
		int n = 0, k = 0;
		cin >> n >> k;
		vector<int> a;
		a.push_back(0);
		for (int j = 0; j <n; ++j) {
			int tmp = 0;
			cin >> tmp;
			a.push_back(tmp);
		}
		result.push_back(dynamic_programming(a, k));
	}

	auto iter = result.begin();
	for (; iter != result.end(); ++iter)
	{
		cout << *iter << endl;
	}
	return 0;
}
