
4. 两个排序数组的中位数

给定两个大小为 m 和 n 的有序数组 nums1 和 nums2 。

请找出这两个有序数组的中位数。要求算法的时间复杂度为 O(log (m+n)) 。

你可以假设 nums1 和 nums2 不同时为空。

示例 1:

nums1 = [1, 3]
nums2 = [2]

中位数是 2.0
示例 2:

nums1 = [1, 2]
nums2 = [3, 4]

中位数是 (2 + 3)/2 = 2.5



#include "stdafx.h"
#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;



int getk(vector<int>& nums1, vector<int>& nums2, int len1, int len2, int k);
double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
	int len1 = nums1.size();
	int len2 = nums2.size();
	int k1 = (len1 + len2 + 1) / 2;
	int k2 = (len1 + len2 + 2) / 2;
	int id1 = getk(nums1, nums2, len1, len2, k1);
	int id2 = getk(nums1, nums2, len1, len2, k2);
	return (double)((id1 + id2) / 2.0);
}

int getk(vector<int>& nums1, vector<int>& nums2, int len1, int len2, int k) {
	if (len1 == 0)
		return nums2[k - 1];
	if (len2 == 0)
		return nums1[k - 1];
	int l1 = (k + 1) / 2;
	if (l1 > len1)
	{
		l1 = len1;
	}
	int l2 = k - l1;
	if (l2 > len2)
	{
		l2 = len2;
	}
	int s1 = 0, e1 = s1 + l1 - 1;	
	int s2 = 0, e2 = s2 + l2 - 1;
	
	while (1)
	{
		if (nums1[e1] < nums2[e2])
		{
			
			
			if ((e1 + 1) >= len1)
			{
				return nums2[s2 + k - e1 + s1 - 2];
			}
			s1 = e1 + 1;
			k -= l1;
		}
		else if (nums1[e1] >= nums2[e2])
		{
			if ((e2 + 1) >= len2)
			{
				return nums1[s1 + k - e2 + s2 - 2];
			}
			s2 = e2 + 1;
			k -= l2;
		}
		
		
		l1 = (k + 1) / 2;
		l2 = k - l1;
		if ((l1 == 0 && l2 == 1 )|| (l2 == 0 && l1 == 1))
		{
			return min(nums1[s1], nums2[s2]);
		}
		e1 = s1 + l1 - 1;
		e2 = s2 + l2 - 1;
		
		if (e1 >= len1) e1 = len1 - 1;
		if (e2 >= len2) e2 = len2 - 1;

	}
	return -1;
}
int main()
{
	
	vector<int> A = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 };
	vector<int> B = {0, 6};
	
	double re = findMedianSortedArrays(A,B);
	cout << re;
	system("pause");
	return 0;
}


